<span title="LineNr "class="LineNr first-LineNr">1</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;linux/btree.h&gt;
</span><span title="LineNr "class="LineNr">2</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;linux/cache.h&gt;
</span><span title="LineNr "class="LineNr">3</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;linux/kernel.h&gt;
</span><span title="LineNr "class="LineNr">4</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;linux/slab.h&gt;
</span><span title="LineNr "class="LineNr">5</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;linux/module.h&gt;
</span><span title="LineNr "class="LineNr">6</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">7</span>  <span title="cDefine "class="cDefine">#define MAX(a, b) ((a) &gt; (b) ? (a) : (b))
</span><span title="LineNr "class="LineNr">8</span>  <span title="cDefine "class="cDefine">#define NODESIZE MAX(L1_CACHE_BYTES, </span><span title="cNumber "class="cNumber">128</span><span title="cDefine "class="cDefine">)
</span><span title="LineNr "class="LineNr">9</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">10</span>  <span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo {
</span><span title="LineNr "class="LineNr">11</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> keylen;
</span><span title="LineNr "class="LineNr">12</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> no_pairs;
</span><span title="LineNr "class="LineNr">13</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> no_longs;
</span><span title="LineNr "class="LineNr">14</span>  <span title="Normal "class="Normal">};
</span><span title="LineNr "class="LineNr">15</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">16</span>  <span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo btree_geo32 &#61; {
</span><span title="LineNr "class="LineNr">17</span>  <span title="Normal "class="Normal">	.keylen &#61; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">18</span>  <span title="Normal "class="Normal">	.no_pairs &#61; NODESIZE / </span><span title="cOperator "class="cOperator">sizeof</span><span title="Normal "class="Normal">(</span><span title="cType "class="cType">long</span><span title="Normal "class="Normal">) / </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">19</span>  <span title="Normal "class="Normal">	.no_longs &#61; NODESIZE / </span><span title="cOperator "class="cOperator">sizeof</span><span title="Normal "class="Normal">(</span><span title="cType "class="cType">long</span><span title="Normal "class="Normal">) / </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">20</span>  <span title="Normal "class="Normal">};
</span><span title="LineNr "class="LineNr">21</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_geo32);
</span><span title="LineNr "class="LineNr">22</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">23</span>  <span title="cDefine "class="cDefine">#define LONG_PER_U64 (</span><span title="cNumber "class="cNumber">64</span><span title="cDefine "class="cDefine"> / BITS_PER_LONG)
</span><span title="LineNr "class="LineNr">24</span>  <span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo btree_geo64 &#61; {
</span><span title="LineNr "class="LineNr">25</span>  <span title="Normal "class="Normal">	.keylen &#61; LONG_PER_U64,
</span><span title="LineNr "class="LineNr">26</span>  <span title="Normal "class="Normal">	.no_pairs &#61; NODESIZE / </span><span title="cOperator "class="cOperator">sizeof</span><span title="Normal "class="Normal">(</span><span title="cType "class="cType">long</span><span title="Normal "class="Normal">) / (</span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal"> + LONG_PER_U64),
</span><span title="LineNr "class="LineNr">27</span>  <span title="Normal "class="Normal">	.no_longs &#61; LONG_PER_U64 * (NODESIZE / </span><span title="cOperator "class="cOperator">sizeof</span><span title="Normal "class="Normal">(</span><span title="cType "class="cType">long</span><span title="Normal "class="Normal">) / (</span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal"> + LONG_PER_U64)),
</span><span title="LineNr "class="LineNr">28</span>  <span title="Normal "class="Normal">};
</span><span title="LineNr "class="LineNr">29</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_geo64);
</span><span title="LineNr "class="LineNr">30</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">31</span>  <span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo btree_geo128 &#61; {
</span><span title="LineNr "class="LineNr">32</span>  <span title="Normal "class="Normal">	.keylen &#61; </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal"> * LONG_PER_U64,
</span><span title="LineNr "class="LineNr">33</span>  <span title="Normal "class="Normal">	.no_pairs &#61; NODESIZE / </span><span title="cOperator "class="cOperator">sizeof</span><span title="Normal "class="Normal">(</span><span title="cType "class="cType">long</span><span title="Normal "class="Normal">) / (</span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal"> + </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal"> * LONG_PER_U64),
</span><span title="LineNr "class="LineNr">34</span>  <span title="Normal "class="Normal">	.no_longs &#61; </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal"> * LONG_PER_U64 * (NODESIZE / </span><span title="cOperator "class="cOperator">sizeof</span><span title="Normal "class="Normal">(</span><span title="cType "class="cType">long</span><span title="Normal "class="Normal">) / (</span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal"> + </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal"> * LONG_PER_U64)),
</span><span title="LineNr "class="LineNr">35</span>  <span title="Normal "class="Normal">};
</span><span title="LineNr "class="LineNr">36</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_geo128);
</span><span title="LineNr "class="LineNr">37</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">38</span>  <span title="cDefine "class="cDefine">#define MAX_KEYLEN	(</span><span title="cNumber "class="cNumber">2</span><span title="cDefine "class="cDefine"> * LONG_PER_U64)
</span><span title="LineNr "class="LineNr">39</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">40</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> kmem_cache *btree_cachep;
</span><span title="LineNr "class="LineNr">41</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">42</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *btree_alloc(gfp_t gfp_mask, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *pool_data)
</span><span title="LineNr "class="LineNr">43</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">44</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> kmem_cache_alloc(btree_cachep, gfp_mask);
</span><span title="LineNr "class="LineNr">45</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">46</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_alloc);
</span><span title="LineNr "class="LineNr">47</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">48</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> btree_free(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *element, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *pool_data)
</span><span title="LineNr "class="LineNr">49</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">50</span>  <span title="Normal "class="Normal">	kmem_cache_free(btree_cachep, element);
</span><span title="LineNr "class="LineNr">51</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">52</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_free);
</span><span title="LineNr "class="LineNr">53</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">54</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *btree_node_alloc(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, gfp_t gfp)
</span><span title="LineNr "class="LineNr">55</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">56</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node;
</span><span title="LineNr "class="LineNr">57</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">58</span>  <span title="Normal "class="Normal">	node &#61; mempool_alloc(head-&gt;mempool, gfp);
</span><span title="LineNr "class="LineNr">59</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (likely(node))
</span><span title="LineNr "class="LineNr">60</span>  <span title="Normal "class="Normal">		memset(node, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">, NODESIZE);
</span><span title="LineNr "class="LineNr">61</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> node;
</span><span title="LineNr "class="LineNr">62</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">63</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">64</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> longcmp(</span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *l1, </span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *l2, </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> n)
</span><span title="LineNr "class="LineNr">65</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">66</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">67</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">68</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; n; i++) {
</span><span title="LineNr "class="LineNr">69</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (l1[i] &lt; l2[i])
</span><span title="LineNr "class="LineNr">70</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> -</span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">71</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (l1[i] &gt; l2[i])
</span><span title="LineNr "class="LineNr">72</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">73</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">74</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">75</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">76</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">77</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *longcpy(</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *dest, </span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *src,
</span><span title="LineNr "class="LineNr">78</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> n)
</span><span title="LineNr "class="LineNr">79</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">80</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">81</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">82</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; n; i++)
</span><span title="LineNr "class="LineNr">83</span>  <span title="Normal "class="Normal">		dest[i] &#61; src[i];
</span><span title="LineNr "class="LineNr">84</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> dest;
</span><span title="LineNr "class="LineNr">85</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">86</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">87</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *longset(</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *s, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> c, </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> n)
</span><span title="LineNr "class="LineNr">88</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">89</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">90</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">91</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; n; i++)
</span><span title="LineNr "class="LineNr">92</span>  <span title="Normal "class="Normal">		s[i] &#61; c;
</span><span title="LineNr "class="LineNr">93</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> s;
</span><span title="LineNr "class="LineNr">94</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">95</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">96</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> dec_key(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key)
</span><span title="LineNr "class="LineNr">97</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">98</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> val;
</span><span title="LineNr "class="LineNr">99</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">100</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">101</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; geo-&gt;keylen - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">; i &gt;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i--) {
</span><span title="LineNr "class="LineNr">102</span>  <span title="Normal "class="Normal">		val &#61; key[i];
</span><span title="LineNr "class="LineNr">103</span>  <span title="Normal "class="Normal">		key[i] &#61; val - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">104</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (val)
</span><span title="LineNr "class="LineNr">105</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">106</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">107</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">108</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">109</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *bkey(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> n)
</span><span title="LineNr "class="LineNr">110</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">111</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> &amp;node[n * geo-&gt;keylen];
</span><span title="LineNr "class="LineNr">112</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">113</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">114</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *bval(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> n)
</span><span title="LineNr "class="LineNr">115</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">116</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> (</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *)node[geo-&gt;no_longs + n];
</span><span title="LineNr "class="LineNr">117</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">118</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">119</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> setkey(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> n,
</span><span title="LineNr "class="LineNr">120</span>  <span title="Normal "class="Normal">		   </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key)
</span><span title="LineNr "class="LineNr">121</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">122</span>  <span title="Normal "class="Normal">	longcpy(bkey(geo, node, n), key, geo-&gt;keylen);
</span><span title="LineNr "class="LineNr">123</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">124</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">125</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> setval(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> n,
</span><span title="LineNr "class="LineNr">126</span>  <span title="Normal "class="Normal">		   </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *val)
</span><span title="LineNr "class="LineNr">127</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">128</span>  <span title="Normal "class="Normal">	node[geo-&gt;no_longs + n] &#61; (</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal">) val;
</span><span title="LineNr "class="LineNr">129</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">130</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">131</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> clearpair(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> n)
</span><span title="LineNr "class="LineNr">132</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">133</span>  <span title="Normal "class="Normal">	longset(bkey(geo, node, n), </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">, geo-&gt;keylen);
</span><span title="LineNr "class="LineNr">134</span>  <span title="Normal "class="Normal">	node[geo-&gt;no_longs + n] &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">135</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">136</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">137</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cStorageClass "class="cStorageClass">inline</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> __btree_init(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head)
</span><span title="LineNr "class="LineNr">138</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">139</span>  <span title="Normal "class="Normal">	head-&gt;node &#61; </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">140</span>  <span title="Normal "class="Normal">	head-&gt;height &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">141</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">142</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">143</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> btree_init_mempool(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, mempool_t *mempool)
</span><span title="LineNr "class="LineNr">144</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">145</span>  <span title="Normal "class="Normal">	__btree_init(head);
</span><span title="LineNr "class="LineNr">146</span>  <span title="Normal "class="Normal">	head-&gt;mempool &#61; mempool;
</span><span title="LineNr "class="LineNr">147</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">148</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_init_mempool);
</span><span title="LineNr "class="LineNr">149</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">150</span>  <span title="cType "class="cType">int</span><span title="Normal "class="Normal"> btree_init(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head)
</span><span title="LineNr "class="LineNr">151</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">152</span>  <span title="Normal "class="Normal">	__btree_init(head);
</span><span title="LineNr "class="LineNr">153</span>  <span title="Normal "class="Normal">	head-&gt;mempool &#61; mempool_create(</span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">, btree_alloc, btree_free, </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">154</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!head-&gt;mempool)
</span><span title="LineNr "class="LineNr">155</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> -</span><span title="cConstant "class="cConstant">ENOMEM</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">156</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">157</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">158</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_init);
</span><span title="LineNr "class="LineNr">159</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">160</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> btree_destroy(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head)
</span><span title="LineNr "class="LineNr">161</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">162</span>  <span title="Normal "class="Normal">	mempool_free(head-&gt;node, head-&gt;mempool);
</span><span title="LineNr "class="LineNr">163</span>  <span title="Normal "class="Normal">	mempool_destroy(head-&gt;mempool);
</span><span title="LineNr "class="LineNr">164</span>  <span title="Normal "class="Normal">	head-&gt;mempool &#61; </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">165</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">166</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_destroy);
</span><span title="LineNr "class="LineNr">167</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">168</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *btree_last(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">169</span>  <span title="Normal "class="Normal">		 </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key)
</span><span title="LineNr "class="LineNr">170</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">171</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> height &#61; head-&gt;height;
</span><span title="LineNr "class="LineNr">172</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node &#61; head-&gt;node;
</span><span title="LineNr "class="LineNr">173</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">174</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (height &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">175</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">176</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">177</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> ( ; height &gt; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">; height--)
</span><span title="LineNr "class="LineNr">178</span>  <span title="Normal "class="Normal">		node &#61; bval(geo, node, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">179</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">180</span>  <span title="Normal "class="Normal">	longcpy(key, bkey(geo, node, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">), geo-&gt;keylen);
</span><span title="LineNr "class="LineNr">181</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> bval(geo, node, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">182</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">183</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_last);
</span><span title="LineNr "class="LineNr">184</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">185</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> keycmp(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> pos,
</span><span title="LineNr "class="LineNr">186</span>  <span title="Normal "class="Normal">		  </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key)
</span><span title="LineNr "class="LineNr">187</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">188</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> longcmp(bkey(geo, node, pos), key, geo-&gt;keylen);
</span><span title="LineNr "class="LineNr">189</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">190</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">191</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> keyzero(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key)
</span><span title="LineNr "class="LineNr">192</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">193</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">194</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">195</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;keylen; i++)
</span><span title="LineNr "class="LineNr">196</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (key[i])
</span><span title="LineNr "class="LineNr">197</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">198</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">199</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">200</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">201</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">202</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *btree_lookup(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">203</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key)
</span><span title="LineNr "class="LineNr">204</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">205</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i, height &#61; head-&gt;height;
</span><span title="LineNr "class="LineNr">206</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node &#61; head-&gt;node;
</span><span title="LineNr "class="LineNr">207</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">208</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (height &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">209</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">210</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">211</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> ( ; height &gt; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">; height--) {
</span><span title="LineNr "class="LineNr">212</span>  <span title="Normal "class="Normal">		</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;no_pairs; i++)
</span><span title="LineNr "class="LineNr">213</span>  <span title="Normal "class="Normal">			</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (keycmp(geo, node, i, key) &lt;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">214</span>  <span title="Normal "class="Normal">				</span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">215</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (i &#61;&#61; geo-&gt;no_pairs)
</span><span title="LineNr "class="LineNr">216</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">217</span>  <span title="Normal "class="Normal">		node &#61; bval(geo, node, i);
</span><span title="LineNr "class="LineNr">218</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!node)
</span><span title="LineNr "class="LineNr">219</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">220</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">221</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">222</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!node)
</span><span title="LineNr "class="LineNr">223</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">224</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">225</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;no_pairs; i++)
</span><span title="LineNr "class="LineNr">226</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (keycmp(geo, node, i, key) &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">227</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> bval(geo, node, i);
</span><span title="LineNr "class="LineNr">228</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">229</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">230</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_lookup);
</span><span title="LineNr "class="LineNr">231</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">232</span>  <span title="cType "class="cType">int</span><span title="Normal "class="Normal"> btree_update(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">233</span>  <span title="Normal "class="Normal">		 </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *val)
</span><span title="LineNr "class="LineNr">234</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">235</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i, height &#61; head-&gt;height;
</span><span title="LineNr "class="LineNr">236</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node &#61; head-&gt;node;
</span><span title="LineNr "class="LineNr">237</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">238</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (height &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">239</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> -</span><span title="cConstant "class="cConstant">ENOENT</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">240</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">241</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> ( ; height &gt; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">; height--) {
</span><span title="LineNr "class="LineNr">242</span>  <span title="Normal "class="Normal">		</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;no_pairs; i++)
</span><span title="LineNr "class="LineNr">243</span>  <span title="Normal "class="Normal">			</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (keycmp(geo, node, i, key) &lt;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">244</span>  <span title="Normal "class="Normal">				</span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">245</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (i &#61;&#61; geo-&gt;no_pairs)
</span><span title="LineNr "class="LineNr">246</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> -</span><span title="cConstant "class="cConstant">ENOENT</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">247</span>  <span title="Normal "class="Normal">		node &#61; bval(geo, node, i);
</span><span title="LineNr "class="LineNr">248</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!node)
</span><span title="LineNr "class="LineNr">249</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> -</span><span title="cConstant "class="cConstant">ENOENT</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">250</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">251</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">252</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!node)
</span><span title="LineNr "class="LineNr">253</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> -</span><span title="cConstant "class="cConstant">ENOENT</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">254</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">255</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;no_pairs; i++)
</span><span title="LineNr "class="LineNr">256</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (keycmp(geo, node, i, key) &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">) {
</span><span title="LineNr "class="LineNr">257</span>  <span title="Normal "class="Normal">			setval(geo, node, i, val);
</span><span title="LineNr "class="LineNr">258</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">259</span>  <span title="Normal "class="Normal">		}
</span><span title="LineNr "class="LineNr">260</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> -</span><span title="cConstant "class="cConstant">ENOENT</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">261</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">262</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_update);
</span><span title="LineNr "class="LineNr">263</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">264</span>  <span title="cCommentStart "class="cCommentStart">/*
</span><span title="LineNr "class="LineNr">265</span>  <span title="cComment "class="cComment"> * Usually this function is quite similar to normal lookup.  But the key of
</span><span title="LineNr "class="LineNr">266</span>  <span title="cComment "class="cComment"> * a parent node may be smaller than the smallest key of all its siblings.
</span><span title="LineNr "class="LineNr">267</span>  <span title="cComment "class="cComment"> * In such a case we cannot just return NULL, as we have only proven that no
</span><span title="LineNr "class="LineNr">268</span>  <span title="cComment "class="cComment"> * key smaller than __key, but larger than this parent key exists.
</span><span title="LineNr "class="LineNr">269</span>  <span title="cComment "class="cComment"> * So we set __key to the parent key and retry.  We have to use the smallest
</span><span title="LineNr "class="LineNr">270</span>  <span title="cComment "class="cComment"> * such parent key, which is the last parent key we encountered.
</span><span title="LineNr "class="LineNr">271</span>  <span title="cComment "class="cComment"> </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">272</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *btree_get_prev(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">273</span>  <span title="Normal "class="Normal">		     </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *__key)
</span><span title="LineNr "class="LineNr">274</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">275</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i, height;
</span><span title="LineNr "class="LineNr">276</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node, *oldnode;
</span><span title="LineNr "class="LineNr">277</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *retry_key &#61; </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">, key[MAX_KEYLEN];
</span><span title="LineNr "class="LineNr">278</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">279</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (keyzero(geo, __key))
</span><span title="LineNr "class="LineNr">280</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">281</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">282</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (head-&gt;height &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">283</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">284</span>  <span title="Normal "class="Normal">	longcpy(key, __key, geo-&gt;keylen);
</span><span title="LineNr "class="LineNr">285</span>  <span title="cUserLabel "class="cUserLabel">retry</span><span title="cUserCont "class="cUserCont">:
</span><span title="LineNr "class="LineNr">286</span>  <span title="Normal "class="Normal">	dec_key(geo, key);
</span><span title="LineNr "class="LineNr">287</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">288</span>  <span title="Normal "class="Normal">	node &#61; head-&gt;node;
</span><span title="LineNr "class="LineNr">289</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (height &#61; head-&gt;height ; height &gt; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">; height--) {
</span><span title="LineNr "class="LineNr">290</span>  <span title="Normal "class="Normal">		</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;no_pairs; i++)
</span><span title="LineNr "class="LineNr">291</span>  <span title="Normal "class="Normal">			</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (keycmp(geo, node, i, key) &lt;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">292</span>  <span title="Normal "class="Normal">				</span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">293</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (i &#61;&#61; geo-&gt;no_pairs)
</span><span title="LineNr "class="LineNr">294</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">goto</span><span title="Normal "class="Normal"> miss;
</span><span title="LineNr "class="LineNr">295</span>  <span title="Normal "class="Normal">		oldnode &#61; node;
</span><span title="LineNr "class="LineNr">296</span>  <span title="Normal "class="Normal">		node &#61; bval(geo, node, i);
</span><span title="LineNr "class="LineNr">297</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!node)
</span><span title="LineNr "class="LineNr">298</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">goto</span><span title="Normal "class="Normal"> miss;
</span><span title="LineNr "class="LineNr">299</span>  <span title="Normal "class="Normal">		retry_key &#61; bkey(geo, oldnode, i);
</span><span title="LineNr "class="LineNr">300</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">301</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">302</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!node)
</span><span title="LineNr "class="LineNr">303</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">goto</span><span title="Normal "class="Normal"> miss;
</span><span title="LineNr "class="LineNr">304</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">305</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;no_pairs; i++) {
</span><span title="LineNr "class="LineNr">306</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (keycmp(geo, node, i, key) &lt;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">) {
</span><span title="LineNr "class="LineNr">307</span>  <span title="Normal "class="Normal">			</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (bval(geo, node, i)) {
</span><span title="LineNr "class="LineNr">308</span>  <span title="Normal "class="Normal">				longcpy(__key, bkey(geo, node, i), geo-&gt;keylen);
</span><span title="LineNr "class="LineNr">309</span>  <span title="Normal "class="Normal">				</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> bval(geo, node, i);
</span><span title="LineNr "class="LineNr">310</span>  <span title="Normal "class="Normal">			} </span><span title="cConditional "class="cConditional">else
</span><span title="LineNr "class="LineNr">311</span>  <span title="Normal "class="Normal">				</span><span title="cStatement "class="cStatement">goto</span><span title="Normal "class="Normal"> miss;
</span><span title="LineNr "class="LineNr">312</span>  <span title="Normal "class="Normal">		}
</span><span title="LineNr "class="LineNr">313</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">314</span>  <span title="cUserLabel "class="cUserLabel">miss</span><span title="cUserCont "class="cUserCont">:
</span><span title="LineNr "class="LineNr">315</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (retry_key) {
</span><span title="LineNr "class="LineNr">316</span>  <span title="Normal "class="Normal">		longcpy(key, retry_key, geo-&gt;keylen);
</span><span title="LineNr "class="LineNr">317</span>  <span title="Normal "class="Normal">		retry_key &#61; </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">318</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">goto</span><span title="Normal "class="Normal"> retry;
</span><span title="LineNr "class="LineNr">319</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">320</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">321</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">322</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_get_prev);
</span><span title="LineNr "class="LineNr">323</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">324</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> getpos(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node,
</span><span title="LineNr "class="LineNr">325</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key)
</span><span title="LineNr "class="LineNr">326</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">327</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">328</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">329</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;no_pairs; i++) {
</span><span title="LineNr "class="LineNr">330</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (keycmp(geo, node, i, key) &lt;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">331</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">332</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">333</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">334</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">335</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">336</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> getfill(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> start)
</span><span title="LineNr "class="LineNr">337</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">338</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">339</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">340</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; start; i &lt; geo-&gt;no_pairs; i++)
</span><span title="LineNr "class="LineNr">341</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!bval(geo, node, i))
</span><span title="LineNr "class="LineNr">342</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">343</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">344</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">345</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">346</span>  <span title="cCommentStart "class="cCommentStart">/*
</span><span title="LineNr "class="LineNr">347</span>  <span title="cComment "class="cComment"> * locate the correct leaf node in the btree
</span><span title="LineNr "class="LineNr">348</span>  <span title="cComment "class="cComment"> </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">349</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *find_level(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">350</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> level)
</span><span title="LineNr "class="LineNr">351</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">352</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node &#61; head-&gt;node;
</span><span title="LineNr "class="LineNr">353</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i, height;
</span><span title="LineNr "class="LineNr">354</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">355</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (height &#61; head-&gt;height; height &gt; level; height--) {
</span><span title="LineNr "class="LineNr">356</span>  <span title="Normal "class="Normal">		</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;no_pairs; i++)
</span><span title="LineNr "class="LineNr">357</span>  <span title="Normal "class="Normal">			</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (keycmp(geo, node, i, key) &lt;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">358</span>  <span title="Normal "class="Normal">				</span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">359</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">360</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> ((i &#61;&#61; geo-&gt;no_pairs) || !bval(geo, node, i)) {
</span><span title="LineNr "class="LineNr">361</span>  <span title="Normal "class="Normal">			</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> right-most key is too large, update it </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">362</span>  <span title="Normal "class="Normal">			</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> </span><span title="cTodo "class="cTodo">FIXME</span><span title="cComment "class="cComment">: If the right-most key on higher levels is
</span><span title="LineNr "class="LineNr">363</span>  <span title="cComment "class="cComment">			 * always zero, this wouldn&#39;t be necessary. </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">364</span>  <span title="Normal "class="Normal">			i--;
</span><span title="LineNr "class="LineNr">365</span>  <span title="Normal "class="Normal">			setkey(geo, node, i, key);
</span><span title="LineNr "class="LineNr">366</span>  <span title="Normal "class="Normal">		}
</span><span title="LineNr "class="LineNr">367</span>  <span title="Normal "class="Normal">		BUG_ON(i &lt; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">368</span>  <span title="Normal "class="Normal">		node &#61; bval(geo, node, i);
</span><span title="LineNr "class="LineNr">369</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">370</span>  <span title="Normal "class="Normal">	BUG_ON(!node);
</span><span title="LineNr "class="LineNr">371</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> node;
</span><span title="LineNr "class="LineNr">372</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">373</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">374</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> btree_grow(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">375</span>  <span title="Normal "class="Normal">		      gfp_t gfp)
</span><span title="LineNr "class="LineNr">376</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">377</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node;
</span><span title="LineNr "class="LineNr">378</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> fill;
</span><span title="LineNr "class="LineNr">379</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">380</span>  <span title="Normal "class="Normal">	node &#61; btree_node_alloc(head, gfp);
</span><span title="LineNr "class="LineNr">381</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!node)
</span><span title="LineNr "class="LineNr">382</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> -</span><span title="cConstant "class="cConstant">ENOMEM</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">383</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (head-&gt;node) {
</span><span title="LineNr "class="LineNr">384</span>  <span title="Normal "class="Normal">		fill &#61; getfill(geo, head-&gt;node, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">385</span>  <span title="Normal "class="Normal">		setkey(geo, node, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">, bkey(geo, head-&gt;node, fill - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">386</span>  <span title="Normal "class="Normal">		setval(geo, node, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">, head-&gt;node);
</span><span title="LineNr "class="LineNr">387</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">388</span>  <span title="Normal "class="Normal">	head-&gt;node &#61; node;
</span><span title="LineNr "class="LineNr">389</span>  <span title="Normal "class="Normal">	head-&gt;height++;
</span><span title="LineNr "class="LineNr">390</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">391</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">392</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">393</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> btree_shrink(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo)
</span><span title="LineNr "class="LineNr">394</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">395</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node;
</span><span title="LineNr "class="LineNr">396</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> fill;
</span><span title="LineNr "class="LineNr">397</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">398</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (head-&gt;height &lt;&#61; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">399</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">400</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">401</span>  <span title="Normal "class="Normal">	node &#61; head-&gt;node;
</span><span title="LineNr "class="LineNr">402</span>  <span title="Normal "class="Normal">	fill &#61; getfill(geo, node, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">403</span>  <span title="Normal "class="Normal">	BUG_ON(fill &gt; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">404</span>  <span title="Normal "class="Normal">	head-&gt;node &#61; bval(geo, node, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">405</span>  <span title="Normal "class="Normal">	head-&gt;height--;
</span><span title="LineNr "class="LineNr">406</span>  <span title="Normal "class="Normal">	mempool_free(node, head-&gt;mempool);
</span><span title="LineNr "class="LineNr">407</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">408</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">409</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> btree_insert_level(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">410</span>  <span title="Normal "class="Normal">			      </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *val, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> level,
</span><span title="LineNr "class="LineNr">411</span>  <span title="Normal "class="Normal">			      gfp_t gfp)
</span><span title="LineNr "class="LineNr">412</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">413</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node;
</span><span title="LineNr "class="LineNr">414</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i, pos, fill, err;
</span><span title="LineNr "class="LineNr">415</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">416</span>  <span title="Normal "class="Normal">	BUG_ON(!val);
</span><span title="LineNr "class="LineNr">417</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (head-&gt;height &lt; level) {
</span><span title="LineNr "class="LineNr">418</span>  <span title="Normal "class="Normal">		err &#61; btree_grow(head, geo, gfp);
</span><span title="LineNr "class="LineNr">419</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (err)
</span><span title="LineNr "class="LineNr">420</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> err;
</span><span title="LineNr "class="LineNr">421</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">422</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">423</span>  <span title="cUserLabel "class="cUserLabel">retry</span><span title="cUserCont "class="cUserCont">:
</span><span title="LineNr "class="LineNr">424</span>  <span title="Normal "class="Normal">	node &#61; find_level(head, geo, key, level);
</span><span title="LineNr "class="LineNr">425</span>  <span title="Normal "class="Normal">	pos &#61; getpos(geo, node, key);
</span><span title="LineNr "class="LineNr">426</span>  <span title="Normal "class="Normal">	fill &#61; getfill(geo, node, pos);
</span><span title="LineNr "class="LineNr">427</span>  <span title="Normal "class="Normal">	</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> two identical keys are not allowed </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">428</span>  <span title="Normal "class="Normal">	BUG_ON(pos &lt; fill &amp;&amp; keycmp(geo, node, pos, key) &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">429</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">430</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (fill &#61;&#61; geo-&gt;no_pairs) {
</span><span title="LineNr "class="LineNr">431</span>  <span title="Normal "class="Normal">		</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> need to split node </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">432</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *new;
</span><span title="LineNr "class="LineNr">433</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">434</span>  <span title="Normal "class="Normal">		new &#61; btree_node_alloc(head, gfp);
</span><span title="LineNr "class="LineNr">435</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!new)
</span><span title="LineNr "class="LineNr">436</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> -</span><span title="cConstant "class="cConstant">ENOMEM</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">437</span>  <span title="Normal "class="Normal">		err &#61; btree_insert_level(head, geo,
</span><span title="LineNr "class="LineNr">438</span>  <span title="Normal "class="Normal">				bkey(geo, node, fill / </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal"> - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">),
</span><span title="LineNr "class="LineNr">439</span>  <span title="Normal "class="Normal">				new, level + </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">, gfp);
</span><span title="LineNr "class="LineNr">440</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (err) {
</span><span title="LineNr "class="LineNr">441</span>  <span title="Normal "class="Normal">			mempool_free(new, head-&gt;mempool);
</span><span title="LineNr "class="LineNr">442</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> err;
</span><span title="LineNr "class="LineNr">443</span>  <span title="Normal "class="Normal">		}
</span><span title="LineNr "class="LineNr">444</span>  <span title="Normal "class="Normal">		</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; fill / </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal">; i++) {
</span><span title="LineNr "class="LineNr">445</span>  <span title="Normal "class="Normal">			setkey(geo, new, i, bkey(geo, node, i));
</span><span title="LineNr "class="LineNr">446</span>  <span title="Normal "class="Normal">			setval(geo, new, i, bval(geo, node, i));
</span><span title="LineNr "class="LineNr">447</span>  <span title="Normal "class="Normal">			setkey(geo, node, i, bkey(geo, node, i + fill / </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">448</span>  <span title="Normal "class="Normal">			setval(geo, node, i, bval(geo, node, i + fill / </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">449</span>  <span title="Normal "class="Normal">			clearpair(geo, node, i + fill / </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">450</span>  <span title="Normal "class="Normal">		}
</span><span title="LineNr "class="LineNr">451</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (fill &amp; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">) {
</span><span title="LineNr "class="LineNr">452</span>  <span title="Normal "class="Normal">			setkey(geo, node, i, bkey(geo, node, fill - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">453</span>  <span title="Normal "class="Normal">			setval(geo, node, i, bval(geo, node, fill - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">454</span>  <span title="Normal "class="Normal">			clearpair(geo, node, fill - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">455</span>  <span title="Normal "class="Normal">		}
</span><span title="LineNr "class="LineNr">456</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">goto</span><span title="Normal "class="Normal"> retry;
</span><span title="LineNr "class="LineNr">457</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">458</span>  <span title="Normal "class="Normal">	BUG_ON(fill &gt;&#61; geo-&gt;no_pairs);
</span><span title="LineNr "class="LineNr">459</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">460</span>  <span title="Normal "class="Normal">	</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> shift and insert </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">461</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; fill; i &gt; pos; i--) {
</span><span title="LineNr "class="LineNr">462</span>  <span title="Normal "class="Normal">		setkey(geo, node, i, bkey(geo, node, i - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">463</span>  <span title="Normal "class="Normal">		setval(geo, node, i, bval(geo, node, i - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">464</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">465</span>  <span title="Normal "class="Normal">	setkey(geo, node, pos, key);
</span><span title="LineNr "class="LineNr">466</span>  <span title="Normal "class="Normal">	setval(geo, node, pos, val);
</span><span title="LineNr "class="LineNr">467</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">468</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">469</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">470</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">471</span>  <span title="cType "class="cType">int</span><span title="Normal "class="Normal"> btree_insert(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">472</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *val, gfp_t gfp)
</span><span title="LineNr "class="LineNr">473</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">474</span>  <span title="Normal "class="Normal">	BUG_ON(!val);
</span><span title="LineNr "class="LineNr">475</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> btree_insert_level(head, geo, key, val, </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">, gfp);
</span><span title="LineNr "class="LineNr">476</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">477</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_insert);
</span><span title="LineNr "class="LineNr">478</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">479</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *btree_remove_level(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">480</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> level);
</span><span title="LineNr "class="LineNr">481</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> merge(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> level,
</span><span title="LineNr "class="LineNr">482</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *left, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> lfill,
</span><span title="LineNr "class="LineNr">483</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *right, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> rfill,
</span><span title="LineNr "class="LineNr">484</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *parent, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> lpos)
</span><span title="LineNr "class="LineNr">485</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">486</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">487</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">488</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; rfill; i++) {
</span><span title="LineNr "class="LineNr">489</span>  <span title="Normal "class="Normal">		</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> Move all keys to the left </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">490</span>  <span title="Normal "class="Normal">		setkey(geo, left, lfill + i, bkey(geo, right, i));
</span><span title="LineNr "class="LineNr">491</span>  <span title="Normal "class="Normal">		setval(geo, left, lfill + i, bval(geo, right, i));
</span><span title="LineNr "class="LineNr">492</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">493</span>  <span title="Normal "class="Normal">	</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> Exchange left and right child in parent </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">494</span>  <span title="Normal "class="Normal">	setval(geo, parent, lpos, right);
</span><span title="LineNr "class="LineNr">495</span>  <span title="Normal "class="Normal">	setval(geo, parent, lpos + </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">, left);
</span><span title="LineNr "class="LineNr">496</span>  <span title="Normal "class="Normal">	</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> Remove left (formerly right) child from parent </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">497</span>  <span title="Normal "class="Normal">	btree_remove_level(head, geo, bkey(geo, parent, lpos), level + </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">498</span>  <span title="Normal "class="Normal">	mempool_free(right, head-&gt;mempool);
</span><span title="LineNr "class="LineNr">499</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">500</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">501</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> rebalance(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">502</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> level, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *child, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> fill)
</span><span title="LineNr "class="LineNr">503</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">504</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *parent, *left &#61; </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">, *right &#61; </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">505</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i, no_left, no_right;
</span><span title="LineNr "class="LineNr">506</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">507</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (fill &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">) {
</span><span title="LineNr "class="LineNr">508</span>  <span title="Normal "class="Normal">		</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> Because we don&#39;t steal entries from a neighbour, this case
</span><span title="LineNr "class="LineNr">509</span>  <span title="cComment "class="cComment">		 * can happen.  Parent node contains a single child, this
</span><span title="LineNr "class="LineNr">510</span>  <span title="cComment "class="cComment">		 * node, so merging with a sibling never happens.
</span><span title="LineNr "class="LineNr">511</span>  <span title="cComment "class="cComment">		 </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">512</span>  <span title="Normal "class="Normal">		btree_remove_level(head, geo, key, level + </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">513</span>  <span title="Normal "class="Normal">		mempool_free(child, head-&gt;mempool);
</span><span title="LineNr "class="LineNr">514</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">515</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">516</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">517</span>  <span title="Normal "class="Normal">	parent &#61; find_level(head, geo, key, level + </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">518</span>  <span title="Normal "class="Normal">	i &#61; getpos(geo, parent, key);
</span><span title="LineNr "class="LineNr">519</span>  <span title="Normal "class="Normal">	BUG_ON(bval(geo, parent, i) !&#61; child);
</span><span title="LineNr "class="LineNr">520</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">521</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (i &gt; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">) {
</span><span title="LineNr "class="LineNr">522</span>  <span title="Normal "class="Normal">		left &#61; bval(geo, parent, i - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">523</span>  <span title="Normal "class="Normal">		no_left &#61; getfill(geo, left, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">524</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (fill + no_left &lt;&#61; geo-&gt;no_pairs) {
</span><span title="LineNr "class="LineNr">525</span>  <span title="Normal "class="Normal">			merge(head, geo, level,
</span><span title="LineNr "class="LineNr">526</span>  <span title="Normal "class="Normal">					left, no_left,
</span><span title="LineNr "class="LineNr">527</span>  <span title="Normal "class="Normal">					child, fill,
</span><span title="LineNr "class="LineNr">528</span>  <span title="Normal "class="Normal">					parent, i - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">529</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">530</span>  <span title="Normal "class="Normal">		}
</span><span title="LineNr "class="LineNr">531</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">532</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (i + </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal"> &lt; getfill(geo, parent, i)) {
</span><span title="LineNr "class="LineNr">533</span>  <span title="Normal "class="Normal">		right &#61; bval(geo, parent, i + </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">534</span>  <span title="Normal "class="Normal">		no_right &#61; getfill(geo, right, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">535</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (fill + no_right &lt;&#61; geo-&gt;no_pairs) {
</span><span title="LineNr "class="LineNr">536</span>  <span title="Normal "class="Normal">			merge(head, geo, level,
</span><span title="LineNr "class="LineNr">537</span>  <span title="Normal "class="Normal">					child, fill,
</span><span title="LineNr "class="LineNr">538</span>  <span title="Normal "class="Normal">					right, no_right,
</span><span title="LineNr "class="LineNr">539</span>  <span title="Normal "class="Normal">					parent, i);
</span><span title="LineNr "class="LineNr">540</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">541</span>  <span title="Normal "class="Normal">		}
</span><span title="LineNr "class="LineNr">542</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">543</span>  <span title="Normal "class="Normal">	</span><span title="cCommentStart "class="cCommentStart">/*
</span><span title="LineNr "class="LineNr">544</span>  <span title="cComment "class="cComment">	 * We could also try to steal one entry from the left or right
</span><span title="LineNr "class="LineNr">545</span>  <span title="cComment "class="cComment">	 * neighbor.  By not doing so we changed the invariant from
</span><span title="LineNr "class="LineNr">546</span>  <span title="cComment "class="cComment">	 * &quot;all nodes are at least half full&quot; to &quot;no two neighboring
</span><span title="LineNr "class="LineNr">547</span>  <span title="cComment "class="cComment">	 * nodes can be merged&quot;.  Which means that the average fill of
</span><span title="LineNr "class="LineNr">548</span>  <span title="cComment "class="cComment">	 * all nodes is still half or better.
</span><span title="LineNr "class="LineNr">549</span>  <span title="cComment "class="cComment">	 </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">550</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">551</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">552</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *btree_remove_level(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">553</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> level)
</span><span title="LineNr "class="LineNr">554</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">555</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node;
</span><span title="LineNr "class="LineNr">556</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i, pos, fill;
</span><span title="LineNr "class="LineNr">557</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *ret;
</span><span title="LineNr "class="LineNr">558</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">559</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (level &gt; head-&gt;height) {
</span><span title="LineNr "class="LineNr">560</span>  <span title="Normal "class="Normal">		</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> we recursed all the way up </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">561</span>  <span title="Normal "class="Normal">		head-&gt;height &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">562</span>  <span title="Normal "class="Normal">		head-&gt;node &#61; </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">563</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">564</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">565</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">566</span>  <span title="Normal "class="Normal">	node &#61; find_level(head, geo, key, level);
</span><span title="LineNr "class="LineNr">567</span>  <span title="Normal "class="Normal">	pos &#61; getpos(geo, node, key);
</span><span title="LineNr "class="LineNr">568</span>  <span title="Normal "class="Normal">	fill &#61; getfill(geo, node, pos);
</span><span title="LineNr "class="LineNr">569</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> ((level &#61;&#61; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">) &amp;&amp; (keycmp(geo, node, pos, key) !&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">))
</span><span title="LineNr "class="LineNr">570</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">571</span>  <span title="Normal "class="Normal">	ret &#61; bval(geo, node, pos);
</span><span title="LineNr "class="LineNr">572</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">573</span>  <span title="Normal "class="Normal">	</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> remove and shift </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">574</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; pos; i &lt; fill - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">; i++) {
</span><span title="LineNr "class="LineNr">575</span>  <span title="Normal "class="Normal">		setkey(geo, node, i, bkey(geo, node, i + </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">576</span>  <span title="Normal "class="Normal">		setval(geo, node, i, bval(geo, node, i + </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">577</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">578</span>  <span title="Normal "class="Normal">	clearpair(geo, node, fill - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">579</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">580</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (fill - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal"> &lt; geo-&gt;no_pairs / </span><span title="cNumber "class="cNumber">2</span><span title="Normal "class="Normal">) {
</span><span title="LineNr "class="LineNr">581</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (level &lt; head-&gt;height)
</span><span title="LineNr "class="LineNr">582</span>  <span title="Normal "class="Normal">			rebalance(head, geo, key, level, node, fill - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">583</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">else</span><span title="Normal "class="Normal"> </span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (fill - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal"> &#61;&#61; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">584</span>  <span title="Normal "class="Normal">			btree_shrink(head, geo);
</span><span title="LineNr "class="LineNr">585</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">586</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">587</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> ret;
</span><span title="LineNr "class="LineNr">588</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">589</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">590</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *btree_remove(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">591</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key)
</span><span title="LineNr "class="LineNr">592</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">593</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (head-&gt;height &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">594</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">595</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">596</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> btree_remove_level(head, geo, key, </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">597</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">598</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_remove);
</span><span title="LineNr "class="LineNr">599</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">600</span>  <span title="cType "class="cType">int</span><span title="Normal "class="Normal"> btree_merge(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *target, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *victim,
</span><span title="LineNr "class="LineNr">601</span>  <span title="Normal "class="Normal">		</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo, gfp_t gfp)
</span><span title="LineNr "class="LineNr">602</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">603</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> key[MAX_KEYLEN];
</span><span title="LineNr "class="LineNr">604</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> dup[MAX_KEYLEN];
</span><span title="LineNr "class="LineNr">605</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *val;
</span><span title="LineNr "class="LineNr">606</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> err;
</span><span title="LineNr "class="LineNr">607</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">608</span>  <span title="Normal "class="Normal">	BUG_ON(target &#61;&#61; victim);
</span><span title="LineNr "class="LineNr">609</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">610</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!(target-&gt;node)) {
</span><span title="LineNr "class="LineNr">611</span>  <span title="Normal "class="Normal">		</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> target is empty, just copy fields over </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">612</span>  <span title="Normal "class="Normal">		target-&gt;node &#61; victim-&gt;node;
</span><span title="LineNr "class="LineNr">613</span>  <span title="Normal "class="Normal">		target-&gt;height &#61; victim-&gt;height;
</span><span title="LineNr "class="LineNr">614</span>  <span title="Normal "class="Normal">		__btree_init(victim);
</span><span title="LineNr "class="LineNr">615</span>  <span title="Normal "class="Normal">		</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">616</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">617</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">618</span>  <span title="Normal "class="Normal">	</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> </span><span title="cTodo "class="cTodo">TODO</span><span title="cComment "class="cComment">: This needs some optimizations.  Currently we do three tree
</span><span title="LineNr "class="LineNr">619</span>  <span title="cComment "class="cComment">	 * walks to remove a single object from the victim.
</span><span title="LineNr "class="LineNr">620</span>  <span title="cComment "class="cComment">	 </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">621</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (;;) {
</span><span title="LineNr "class="LineNr">622</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!btree_last(victim, geo, key))
</span><span title="LineNr "class="LineNr">623</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">624</span>  <span title="Normal "class="Normal">		val &#61; btree_lookup(victim, geo, key);
</span><span title="LineNr "class="LineNr">625</span>  <span title="Normal "class="Normal">		err &#61; btree_insert(target, geo, key, val, gfp);
</span><span title="LineNr "class="LineNr">626</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (err)
</span><span title="LineNr "class="LineNr">627</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> err;
</span><span title="LineNr "class="LineNr">628</span>  <span title="Normal "class="Normal">		</span><span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> We must make a copy of the key, as the original will get
</span><span title="LineNr "class="LineNr">629</span>  <span title="cComment "class="cComment">		 * mangled inside btree_remove. </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">630</span>  <span title="Normal "class="Normal">		longcpy(dup, key, geo-&gt;keylen);
</span><span title="LineNr "class="LineNr">631</span>  <span title="Normal "class="Normal">		btree_remove(victim, geo, dup);
</span><span title="LineNr "class="LineNr">632</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">633</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">634</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">635</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_merge);
</span><span title="LineNr "class="LineNr">636</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">637</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> __btree_for_each(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">638</span>  <span title="Normal "class="Normal">			       </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *node, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque,
</span><span title="LineNr "class="LineNr">639</span>  <span title="Normal "class="Normal">			       </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> (*func)(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *elem, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque,
</span><span title="LineNr "class="LineNr">640</span>  <span title="Normal "class="Normal">					    </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key, </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> index,
</span><span title="LineNr "class="LineNr">641</span>  <span title="Normal "class="Normal">					    </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *func2),
</span><span title="LineNr "class="LineNr">642</span>  <span title="Normal "class="Normal">			       </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *func2, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> reap, </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> height, </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> count)
</span><span title="LineNr "class="LineNr">643</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">644</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> i;
</span><span title="LineNr "class="LineNr">645</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *child;
</span><span title="LineNr "class="LineNr">646</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">647</span>  <span title="Normal "class="Normal">	</span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (i &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">; i &lt; geo-&gt;no_pairs; i++) {
</span><span title="LineNr "class="LineNr">648</span>  <span title="Normal "class="Normal">		child &#61; bval(geo, node, i);
</span><span title="LineNr "class="LineNr">649</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!child)
</span><span title="LineNr "class="LineNr">650</span>  <span title="Normal "class="Normal">			</span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">651</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (height &gt; </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">652</span>  <span title="Normal "class="Normal">			count &#61; __btree_for_each(head, geo, child, opaque,
</span><span title="LineNr "class="LineNr">653</span>  <span title="Normal "class="Normal">					func, func2, reap, height - </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">, count);
</span><span title="LineNr "class="LineNr">654</span>  <span title="Normal "class="Normal">		</span><span title="cConditional "class="cConditional">else
</span><span title="LineNr "class="LineNr">655</span>  <span title="Normal "class="Normal">			func(child, opaque, bkey(geo, node, i), count++,
</span><span title="LineNr "class="LineNr">656</span>  <span title="Normal "class="Normal">					func2);
</span><span title="LineNr "class="LineNr">657</span>  <span title="Normal "class="Normal">	}
</span><span title="LineNr "class="LineNr">658</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (reap)
</span><span title="LineNr "class="LineNr">659</span>  <span title="Normal "class="Normal">		mempool_free(node, head-&gt;mempool);
</span><span title="LineNr "class="LineNr">660</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> count;
</span><span title="LineNr "class="LineNr">661</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">662</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">663</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> empty(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *elem, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key,
</span><span title="LineNr "class="LineNr">664</span>  <span title="Normal "class="Normal">		  </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> index, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *func2)
</span><span title="LineNr "class="LineNr">665</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">666</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">667</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">668</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> visitorl(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *elem, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key,
</span><span title="LineNr "class="LineNr">669</span>  <span title="Normal "class="Normal">	      </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> index, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *__func)
</span><span title="LineNr "class="LineNr">670</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">671</span>  <span title="Normal "class="Normal">	visitorl_t func &#61; __func;
</span><span title="LineNr "class="LineNr">672</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">673</span>  <span title="Normal "class="Normal">	func(elem, opaque, *key, index);
</span><span title="LineNr "class="LineNr">674</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">675</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(visitorl);
</span><span title="LineNr "class="LineNr">676</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">677</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> visitor32(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *elem, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *__key,
</span><span title="LineNr "class="LineNr">678</span>  <span title="Normal "class="Normal">	       </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> index, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *__func)
</span><span title="LineNr "class="LineNr">679</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">680</span>  <span title="Normal "class="Normal">	visitor32_t func &#61; __func;
</span><span title="LineNr "class="LineNr">681</span>  <span title="Normal "class="Normal">	u32 *key &#61; (</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *)__key;
</span><span title="LineNr "class="LineNr">682</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">683</span>  <span title="Normal "class="Normal">	func(elem, opaque, *key, index);
</span><span title="LineNr "class="LineNr">684</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">685</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(visitor32);
</span><span title="LineNr "class="LineNr">686</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">687</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> visitor64(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *elem, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *__key,
</span><span title="LineNr "class="LineNr">688</span>  <span title="Normal "class="Normal">	       </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> index, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *__func)
</span><span title="LineNr "class="LineNr">689</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">690</span>  <span title="Normal "class="Normal">	visitor64_t func &#61; __func;
</span><span title="LineNr "class="LineNr">691</span>  <span title="Normal "class="Normal">	u64 *key &#61; (</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *)__key;
</span><span title="LineNr "class="LineNr">692</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">693</span>  <span title="Normal "class="Normal">	func(elem, opaque, *key, index);
</span><span title="LineNr "class="LineNr">694</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">695</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(visitor64);
</span><span title="LineNr "class="LineNr">696</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">697</span>  <span title="cType "class="cType">void</span><span title="Normal "class="Normal"> visitor128(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *elem, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *__key,
</span><span title="LineNr "class="LineNr">698</span>  <span title="Normal "class="Normal">		</span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> index, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *__func)
</span><span title="LineNr "class="LineNr">699</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">700</span>  <span title="Normal "class="Normal">	visitor128_t func &#61; __func;
</span><span title="LineNr "class="LineNr">701</span>  <span title="Normal "class="Normal">	u64 *key &#61; (</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *)__key;
</span><span title="LineNr "class="LineNr">702</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">703</span>  <span title="Normal "class="Normal">	func(elem, opaque, key[</span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">], key[</span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">], index);
</span><span title="LineNr "class="LineNr">704</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">705</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(visitor128);
</span><span title="LineNr "class="LineNr">706</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">707</span>  <span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> btree_visitor(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">708</span>  <span title="Normal "class="Normal">		     </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque,
</span><span title="LineNr "class="LineNr">709</span>  <span title="Normal "class="Normal">		     </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> (*func)(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *elem, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque,
</span><span title="LineNr "class="LineNr">710</span>  <span title="Normal "class="Normal">		     		  </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key,
</span><span title="LineNr "class="LineNr">711</span>  <span title="Normal "class="Normal">		     		  </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> index, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *func2),
</span><span title="LineNr "class="LineNr">712</span>  <span title="Normal "class="Normal">		     </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *func2)
</span><span title="LineNr "class="LineNr">713</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">714</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> count &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">715</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">716</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!func2)
</span><span title="LineNr "class="LineNr">717</span>  <span title="Normal "class="Normal">		func &#61; empty;
</span><span title="LineNr "class="LineNr">718</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (head-&gt;node)
</span><span title="LineNr "class="LineNr">719</span>  <span title="Normal "class="Normal">		count &#61; __btree_for_each(head, geo, head-&gt;node, opaque, func,
</span><span title="LineNr "class="LineNr">720</span>  <span title="Normal "class="Normal">				func2, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">, head-&gt;height, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">721</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> count;
</span><span title="LineNr "class="LineNr">722</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">723</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_visitor);
</span><span title="LineNr "class="LineNr">724</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">725</span>  <span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> btree_grim_visitor(</span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_head *head, </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> btree_geo *geo,
</span><span title="LineNr "class="LineNr">726</span>  <span title="Normal "class="Normal">			  </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque,
</span><span title="LineNr "class="LineNr">727</span>  <span title="Normal "class="Normal">			  </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> (*func)(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *elem, </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> opaque,
</span><span title="LineNr "class="LineNr">728</span>  <span title="Normal "class="Normal">				       </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">long</span><span title="Normal "class="Normal"> *key,
</span><span title="LineNr "class="LineNr">729</span>  <span title="Normal "class="Normal">				       </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> index, </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *func2),
</span><span title="LineNr "class="LineNr">730</span>  <span title="Normal "class="Normal">			  </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> *func2)
</span><span title="LineNr "class="LineNr">731</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">732</span>  <span title="Normal "class="Normal">	</span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> count &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">733</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">734</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (!func2)
</span><span title="LineNr "class="LineNr">735</span>  <span title="Normal "class="Normal">		func &#61; empty;
</span><span title="LineNr "class="LineNr">736</span>  <span title="Normal "class="Normal">	</span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (head-&gt;node)
</span><span title="LineNr "class="LineNr">737</span>  <span title="Normal "class="Normal">		count &#61; __btree_for_each(head, geo, head-&gt;node, opaque, func,
</span><span title="LineNr "class="LineNr">738</span>  <span title="Normal "class="Normal">				func2, </span><span title="cNumber "class="cNumber">1</span><span title="Normal "class="Normal">, head-&gt;height, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">739</span>  <span title="Normal "class="Normal">	__btree_init(head);
</span><span title="LineNr "class="LineNr">740</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> count;
</span><span title="LineNr "class="LineNr">741</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">742</span>  <span title="Normal "class="Normal">EXPORT_SYMBOL_GPL(btree_grim_visitor);
</span><span title="LineNr "class="LineNr">743</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">744</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> __init btree_module_init(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">745</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">746</span>  <span title="Normal "class="Normal">	btree_cachep &#61; kmem_cache_create(</span><span title="cString "class="cString">&quot;btree_node&quot;</span><span title="Normal "class="Normal">, NODESIZE, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">747</span>  <span title="Normal "class="Normal">			SLAB_HWCACHE_ALIGN, </span><span title="cConstant "class="cConstant">NULL</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">748</span>  <span title="Normal "class="Normal">	</span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">749</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">750</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">751</span>  <span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> __exit btree_module_exit(</span><span title="cType "class="cType">void</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">752</span>  <span title="Normal "class="Normal">{
</span><span title="LineNr "class="LineNr">753</span>  <span title="Normal "class="Normal">	kmem_cache_destroy(btree_cachep);
</span><span title="LineNr "class="LineNr">754</span>  <span title="Normal "class="Normal">}
</span><span title="LineNr "class="LineNr">755</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">756</span>  <span title="cCommentStart "class="cCommentStart">/*</span><span title="cComment "class="cComment"> If core code starts using btree, initialization should happen even earlier </span><span title="cCommentStart "class="cCommentStart">*/
</span><span title="LineNr "class="LineNr">757</span>  <span title="Normal "class="Normal">module_init(btree_module_init);
</span><span title="LineNr "class="LineNr">758</span>  <span title="Normal "class="Normal">module_exit(btree_module_exit);
</span><span title="LineNr "class="LineNr">759</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">760</span>  <span title="Normal "class="Normal">MODULE_AUTHOR(</span><span title="cString "class="cString">&quot;Joern Engel &lt;joern@logfs.org&gt;&quot;</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">761</span>  <span title="Normal "class="Normal">MODULE_AUTHOR(</span><span title="cString "class="cString">&quot;Johannes Berg &lt;johannes@sipsolutions.net&gt;&quot;</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr last-LineNr">762</span>  <span title="Normal "class="Normal">MODULE_LICENSE(</span><span title="cString "class="cString">&quot;GPL&quot;</span><span title="Normal "class="Normal">);</span>