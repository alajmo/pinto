<span title="LineNr "class="LineNr first-LineNr">1</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;c10/cuda/CUDAStream.h&gt;
</span><span title="LineNr "class="LineNr">2</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;c10/cuda/CUDAFunctions.h&gt;
</span><span title="LineNr "class="LineNr">3</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;c10/cuda/CUDAGuard.h&gt;
</span><span title="LineNr "class="LineNr">4</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;c10/util/Exception.h&gt;
</span><span title="LineNr "class="LineNr">5</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">6</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;array&gt;
</span><span title="LineNr "class="LineNr">7</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;atomic&gt;
</span><span title="LineNr "class="LineNr">8</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;cstdint&gt;
</span><span title="LineNr "class="LineNr">9</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;mutex&gt;
</span><span title="LineNr "class="LineNr">10</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;vector&gt;
</span><span title="LineNr "class="LineNr">11</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">12</span>  <span title="cInclude "class="cInclude">#include </span><span title="cIncluded "class="cIncluded">&lt;iostream&gt;
</span><span title="LineNr "class="LineNr">13</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">14</span>  <span title="cppStructure "class="cppStructure">namespace</span><span title="Normal "class="Normal"> c10 {
</span><span title="LineNr "class="LineNr">15</span>  <span title="Normal "class="Normal">  </span><span title="cppStructure "class="cppStructure">namespace</span><span title="Normal "class="Normal"> cuda {
</span><span title="LineNr "class="LineNr">16</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">17</span>  <span title="Normal "class="Normal">    </span><span title="cppStructure "class="cppStructure">namespace</span><span title="Normal "class="Normal"> {
</span><span title="LineNr "class="LineNr">18</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">19</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Internal implementation that leaks the stream. It&#39;s not intended to be used
</span><span title="LineNr "class="LineNr">20</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// outside of this file.
</span><span title="LineNr "class="LineNr">21</span>  <span title="Normal "class="Normal">      </span><span title="cStructure "class="cStructure">struct</span><span title="Normal "class="Normal"> LeakyStreamInternals {
</span><span title="LineNr "class="LineNr">22</span>  <span title="Normal "class="Normal">        LeakyStreamInternals() &#61; </span><span title="cLabel "class="cLabel">default</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">23</span>  <span title="Normal "class="Normal">        C10_DISABLE_COPY_AND_ASSIGN(LeakyStreamInternals);
</span><span title="LineNr "class="LineNr">24</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">25</span>  <span title="Normal "class="Normal">        ~LeakyStreamInternals() {
</span><span title="LineNr "class="LineNr">26</span>  <span title="Normal "class="Normal">          </span><span title="cCommentL "class="cCommentL">// NB: this code is invoked only in the destruction of global variables
</span><span title="LineNr "class="LineNr">27</span>  <span title="Normal "class="Normal">          </span><span title="cCommentL "class="cCommentL">// (since we never shrink the corresponding vectors). At this point the CUDA
</span><span title="LineNr "class="LineNr">28</span>  <span title="Normal "class="Normal">          </span><span title="cCommentL "class="cCommentL">// runtime might be already destroyed and invoking cudaStreamDestroy leads
</span><span title="LineNr "class="LineNr">29</span>  <span title="Normal "class="Normal">          </span><span title="cCommentL "class="cCommentL">// to a crash. It&#39;s likely an issue in CUDA, but to be safe - let&#39;s just
</span><span title="LineNr "class="LineNr">30</span>  <span title="Normal "class="Normal">          </span><span title="cCommentL "class="cCommentL">// &quot;forget&quot; the destruction.
</span><span title="LineNr "class="LineNr">31</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">32</span>  <span title="Normal "class="Normal">          </span><span title="cCommentL "class="cCommentL">// if (stream) cudaStreamDestroy(stream);
</span><span title="LineNr "class="LineNr">33</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">34</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">35</span>  <span title="Normal "class="Normal">        DeviceIndex device_index &#61; -</span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">36</span>  <span title="Normal "class="Normal">        </span><span title="cType "class="cType">int32_t</span><span title="Normal "class="Normal"> stream_id &#61; -</span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">37</span>  <span title="Normal "class="Normal">        cudaStream_t stream &#61; </span><span title="cppConstant "class="cppConstant">nullptr</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">38</span>  <span title="Normal "class="Normal">      };
</span><span title="LineNr "class="LineNr">39</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">40</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Global stream state and constants
</span><span title="LineNr "class="LineNr">41</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> DeviceIndex num_gpus &#61; -</span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">42</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cppStorageClass "class="cppStorageClass">constexpr</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> kStreamsPerPoolBits &#61; </span><span title="cppNumber "class="cppNumber">5</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">43</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cppStorageClass "class="cppStorageClass">constexpr</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> kStreamsPerPool &#61; </span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal"> &lt;&lt; kStreamsPerPoolBits;
</span><span title="LineNr "class="LineNr">44</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cppStorageClass "class="cppStorageClass">constexpr</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">unsigned</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> kDefaultFlags &#61; cudaStreamNonBlocking;
</span><span title="LineNr "class="LineNr">45</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">46</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Note: stream priority is not supported by HIP
</span><span title="LineNr "class="LineNr">47</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Note: lower numbers are higher priorities, zero is default priority
</span><span title="LineNr "class="LineNr">48</span>  <span title="cPreCondit "class="cPreCondit">#ifndef __HIP_PLATFORM_HCC__
</span><span title="LineNr "class="LineNr">49</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> kHighPriority &#61; -</span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">50</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">int</span><span title="Normal "class="Normal"> kLowPriority &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">51</span>  <span title="cPreConditMatch "class="cPreConditMatch">#endif</span><span title="Normal "class="Normal"> </span><span title="cCommentL "class="cCommentL">// __HIP_PLATFORM_HCC__
</span><span title="LineNr "class="LineNr">52</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">53</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Default streams
</span><span title="LineNr "class="LineNr">54</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> std::once_flag init_flag;
</span><span title="LineNr "class="LineNr">55</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> LeakyStreamInternals default_streams[C10_COMPILE_TIME_MAX_GPUS];
</span><span title="LineNr "class="LineNr">56</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">57</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Non-default streams
</span><span title="LineNr "class="LineNr">58</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Note: the number of CUDA devices is determined at run time,
</span><span title="LineNr "class="LineNr">59</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// and the low and high priority pools are lazily initialized
</span><span title="LineNr "class="LineNr">60</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// when the first stream is requested for a device.
</span><span title="LineNr "class="LineNr">61</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// The device flags track the initialization of each device, while
</span><span title="LineNr "class="LineNr">62</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// the low and high priority counters track, for each device, the next stream
</span><span title="LineNr "class="LineNr">63</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// in the pool to be returned when a stream is requested (round-robin fashion
</span><span title="LineNr "class="LineNr">64</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// , see the note in CUDAStream.h).
</span><span title="LineNr "class="LineNr">65</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">//
</span><span title="LineNr "class="LineNr">66</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// unique_ptr&lt;T[]&gt; is used instead of vector&lt;T&gt; because T might be non-moveable
</span><span title="LineNr "class="LineNr">67</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// and non-copyable.
</span><span title="LineNr "class="LineNr">68</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> std::once_flag device_flags[C10_COMPILE_TIME_MAX_GPUS];
</span><span title="LineNr "class="LineNr">69</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> std::atomic&lt;</span><span title="cType "class="cType">uint32_t</span><span title="Normal "class="Normal">&gt; low_priority_counters[C10_COMPILE_TIME_MAX_GPUS];
</span><span title="LineNr "class="LineNr">70</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> std::atomic&lt;</span><span title="cType "class="cType">uint32_t</span><span title="Normal "class="Normal">&gt; high_priority_counters[C10_COMPILE_TIME_MAX_GPUS];
</span><span title="LineNr "class="LineNr">71</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> std::array&lt;LeakyStreamInternals, kStreamsPerPool&gt;
</span><span title="LineNr "class="LineNr">72</span>  <span title="Normal "class="Normal">        low_priority_streams[C10_COMPILE_TIME_MAX_GPUS];
</span><span title="LineNr "class="LineNr">73</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> std::array&lt;LeakyStreamInternals, kStreamsPerPool&gt;
</span><span title="LineNr "class="LineNr">74</span>  <span title="Normal "class="Normal">        high_priority_streams[C10_COMPILE_TIME_MAX_GPUS];
</span><span title="LineNr "class="LineNr">75</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">76</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Note [StreamId assignment]
</span><span title="LineNr "class="LineNr">77</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// ~~~~~~~~~~~~~~~~~~~~~~~~~~
</span><span title="LineNr "class="LineNr">78</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// How do we assign stream IDs?
</span><span title="LineNr "class="LineNr">79</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">//
</span><span title="LineNr "class="LineNr">80</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// -- 25 bits -- -- 2 bits --  -- 5 bits -----
</span><span title="LineNr "class="LineNr">81</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// zeros         StreamIdType  stream id index
</span><span title="LineNr "class="LineNr">82</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">//
</span><span title="LineNr "class="LineNr">83</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Where StreamIdType:
</span><span title="LineNr "class="LineNr">84</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">//  00 &#61; default stream
</span><span title="LineNr "class="LineNr">85</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">//  01 &#61; low priority stream
</span><span title="LineNr "class="LineNr">86</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">//  10 &#61; high priority stream
</span><span title="LineNr "class="LineNr">87</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">//
</span><span title="LineNr "class="LineNr">88</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// This is not really for efficiency; it&#39;s just easier to write the code
</span><span title="LineNr "class="LineNr">89</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// to extract the index if we do this with bitmasks :)
</span><span title="LineNr "class="LineNr">90</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">//
</span><span title="LineNr "class="LineNr">91</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// We are obligated to treat the stream ID 0 as the default stream, per the
</span><span title="LineNr "class="LineNr">92</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// invariant specified in c10::Stream.  However, all other numbers are entirely
</span><span title="LineNr "class="LineNr">93</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// an internal implementation detail, we reserve the right to renumber streams
</span><span title="LineNr "class="LineNr">94</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// however we like.
</span><span title="LineNr "class="LineNr">95</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">//
</span><span title="LineNr "class="LineNr">96</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Note that it is really important that the MSB is zero; StreamId is a
</span><span title="LineNr "class="LineNr">97</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// *signed* integer, and unsigned to signed conversion outside of the
</span><span title="LineNr "class="LineNr">98</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// bounds of signed integer representation is undefined behavior.  You
</span><span title="LineNr "class="LineNr">99</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// could work around this with something like
</span><span title="LineNr "class="LineNr">100</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// https://stackoverflow.com/questions/13150449/efficient-unsigned-to-signed-cast-avoiding-implementation-defined-behavior
</span><span title="LineNr "class="LineNr">101</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// but it seems a bit overkill for this.
</span><span title="LineNr "class="LineNr">102</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">103</span>  <span title="Normal "class="Normal">      </span><span title="cStructure "class="cStructure">enum</span><span title="Normal "class="Normal"> </span><span title="cppStructure "class="cppStructure">class</span><span title="Normal "class="Normal"> StreamIdType : </span><span title="cType "class="cType">uint8_t</span><span title="Normal "class="Normal"> {
</span><span title="LineNr "class="LineNr">104</span>  <span title="Normal "class="Normal">        DEFAULT &#61; </span><span title="cppNumber "class="cppNumber">0x0</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">105</span>  <span title="Normal "class="Normal">        LOW &#61; </span><span title="cppNumber "class="cppNumber">0x1</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">106</span>  <span title="Normal "class="Normal">        HIGH &#61; </span><span title="cppNumber "class="cppNumber">0x2</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">107</span>  <span title="Normal "class="Normal">      };
</span><span title="LineNr "class="LineNr">108</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">109</span>  <span title="Normal "class="Normal">      std::ostream&amp; </span><span title="cppOperator "class="cppOperator">operator</span><span title="Normal "class="Normal">&lt;&lt;(std::ostream&amp; stream, StreamIdType s) {
</span><span title="LineNr "class="LineNr">110</span>  <span title="Normal "class="Normal">        </span><span title="cConditional "class="cConditional">switch</span><span title="Normal "class="Normal"> (s) {
</span><span title="LineNr "class="LineNr">111</span>  <span title="Normal "class="Normal">          </span><span title="cLabel "class="cLabel">case</span><span title="Normal "class="Normal"> StreamIdType::DEFAULT:
</span><span title="LineNr "class="LineNr">112</span>  <span title="Normal "class="Normal">            stream &lt;&lt; </span><span title="cCppString "class="cCppString">&quot;DEFAULT&quot;</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">113</span>  <span title="Normal "class="Normal">            </span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">114</span>  <span title="Normal "class="Normal">          </span><span title="cLabel "class="cLabel">case</span><span title="Normal "class="Normal"> StreamIdType::LOW:
</span><span title="LineNr "class="LineNr">115</span>  <span title="Normal "class="Normal">            stream &lt;&lt; </span><span title="cCppString "class="cCppString">&quot;LOW&quot;</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">116</span>  <span title="Normal "class="Normal">            </span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">117</span>  <span title="Normal "class="Normal">          </span><span title="cLabel "class="cLabel">case</span><span title="Normal "class="Normal"> StreamIdType::HIGH:
</span><span title="LineNr "class="LineNr">118</span>  <span title="Normal "class="Normal">            stream &lt;&lt; </span><span title="cCppString "class="cCppString">&quot;HIGH&quot;</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">119</span>  <span title="Normal "class="Normal">            </span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">120</span>  <span title="Normal "class="Normal">          </span><span title="cLabel "class="cLabel">default</span><span title="Normal "class="Normal">:
</span><span title="LineNr "class="LineNr">121</span>  <span title="Normal "class="Normal">            stream &lt;&lt; </span><span title="cppCast "class="cppCast">static_cast</span><span title="Normal "class="Normal">&lt;</span><span title="cType "class="cType">uint8_t</span><span title="Normal "class="Normal">&gt;(s);
</span><span title="LineNr "class="LineNr">122</span>  <span title="Normal "class="Normal">            </span><span title="cStatement "class="cStatement">break</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">123</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">124</span>  <span title="Normal "class="Normal">        </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> stream;
</span><span title="LineNr "class="LineNr">125</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">126</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">127</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// StreamId is 32-bit, so we can just rely on regular promotion rules.
</span><span title="LineNr "class="LineNr">128</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// We rely on streamIdIndex and streamIdType being non-negative;
</span><span title="LineNr "class="LineNr">129</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// see Note [Hazard when concatenating signed integers]
</span><span title="LineNr "class="LineNr">130</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">131</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cppModifier "class="cppModifier">inline</span><span title="Normal "class="Normal"> StreamIdType streamIdType(StreamId s) {
</span><span title="LineNr "class="LineNr">132</span>  <span title="Normal "class="Normal">        </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cppCast "class="cppCast">static_cast</span><span title="Normal "class="Normal">&lt;StreamIdType&gt;(s &gt;&gt; kStreamsPerPoolBits);
</span><span title="LineNr "class="LineNr">133</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">134</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">135</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cppModifier "class="cppModifier">inline</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> streamIdIndex(StreamId s) {
</span><span title="LineNr "class="LineNr">136</span>  <span title="Normal "class="Normal">        </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> </span><span title="cppCast "class="cppCast">static_cast</span><span title="Normal "class="Normal">&lt;</span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal">&gt;(s &amp; ((</span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal"> &lt;&lt; kStreamsPerPoolBits) - </span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal">));
</span><span title="LineNr "class="LineNr">137</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">138</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">139</span>  <span title="Normal "class="Normal">      StreamId makeStreamId(StreamIdType st, </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> si) {
</span><span title="LineNr "class="LineNr">140</span>  <span title="Normal "class="Normal">        </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> (</span><span title="cppCast "class="cppCast">static_cast</span><span title="Normal "class="Normal">&lt;StreamId&gt;(st) &lt;&lt; kStreamsPerPoolBits) |
</span><span title="LineNr "class="LineNr">141</span>  <span title="Normal "class="Normal">          </span><span title="cppCast "class="cppCast">static_cast</span><span title="Normal "class="Normal">&lt;StreamId&gt;(si);
</span><span title="LineNr "class="LineNr">142</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">143</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">144</span>  <span title="Normal "class="Normal">      </span><span title="cppStructure "class="cppStructure">template</span><span title="Normal "class="Normal"> &lt;</span><span title="cppStructure "class="cppStructure">typename</span><span title="Normal "class="Normal"> T, </span><span title="cppStructure "class="cppStructure">typename</span><span title="Normal "class="Normal"> A&gt;
</span><span title="LineNr "class="LineNr">145</span>  <span title="Normal "class="Normal">        </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cppType "class="cppType">bool</span><span title="Normal "class="Normal"> pointer_within(</span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> T* ptr, </span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> A&amp; arr) {
</span><span title="LineNr "class="LineNr">146</span>  <span title="Normal "class="Normal">          </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> std::greater_equal&lt;</span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> T*&gt;()(ptr, arr.data()) &amp;&amp;
</span><span title="LineNr "class="LineNr">147</span>  <span title="Normal "class="Normal">            std::less&lt;</span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> T*&gt;()(ptr, arr.data() + arr.size());
</span><span title="LineNr "class="LineNr">148</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">149</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">150</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> StreamId CUDAStream_getStreamId(</span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> LeakyStreamInternals* ptr) {
</span><span title="LineNr "class="LineNr">151</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// Hypothetically, we could store the stream ID in the stream.  But that
</span><span title="LineNr "class="LineNr">152</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// introduces a degree of freedom which could lead to bugs (where we
</span><span title="LineNr "class="LineNr">153</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// misnumber streams in the pool, or overwrite the number).  Better
</span><span title="LineNr "class="LineNr">154</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// to just compute it based on the metric that actually matters,
</span><span title="LineNr "class="LineNr">155</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// which is how we map IDs back into the vectors.
</span><span title="LineNr "class="LineNr">156</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">157</span>  <span title="Normal "class="Normal">        DeviceIndex device_index &#61; ptr-&gt;device_index;
</span><span title="LineNr "class="LineNr">158</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">159</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// Check if it&#39;s the default stream
</span><span title="LineNr "class="LineNr">160</span>  <span title="Normal "class="Normal">        </span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (ptr &#61;&#61; &amp;default_streams[device_index]) {
</span><span title="LineNr "class="LineNr">161</span>  <span title="Normal "class="Normal">          </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> makeStreamId(StreamIdType::DEFAULT, </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">162</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">163</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">164</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// Check if it&#39;s a low priority stream
</span><span title="LineNr "class="LineNr">165</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// NB: Because ptr may not necessarily lie within the array, we must use
</span><span title="LineNr "class="LineNr">166</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// std::less and similar templates to avoid UB that arises when
</span><span title="LineNr "class="LineNr">167</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// doing an operator&lt; comparison.
</span><span title="LineNr "class="LineNr">168</span>  <span title="Normal "class="Normal">        </span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (pointer_within&lt;LeakyStreamInternals&gt;(
</span><span title="LineNr "class="LineNr">169</span>  <span title="Normal "class="Normal">              ptr, low_priority_streams[device_index])) {
</span><span title="LineNr "class="LineNr">170</span>  <span title="Normal "class="Normal">          </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> makeStreamId(
</span><span title="LineNr "class="LineNr">171</span>  <span title="Normal "class="Normal">              StreamIdType::LOW, ptr - low_priority_streams[device_index].data());
</span><span title="LineNr "class="LineNr">172</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">173</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">174</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// Check if it&#39;s a high priority stream
</span><span title="LineNr "class="LineNr">175</span>  <span title="Normal "class="Normal">        </span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (pointer_within&lt;LeakyStreamInternals&gt;(
</span><span title="LineNr "class="LineNr">176</span>  <span title="Normal "class="Normal">              ptr, high_priority_streams[device_index])) {
</span><span title="LineNr "class="LineNr">177</span>  <span title="Normal "class="Normal">          </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> makeStreamId(
</span><span title="LineNr "class="LineNr">178</span>  <span title="Normal "class="Normal">              StreamIdType::HIGH, ptr - high_priority_streams[device_index].data());
</span><span title="LineNr "class="LineNr">179</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">180</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">181</span>  <span title="Normal "class="Normal">        AT_ASSERTM(
</span><span title="LineNr "class="LineNr">182</span>  <span title="Normal "class="Normal">            </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">183</span>  <span title="Normal "class="Normal">            </span><span title="cString "class="cString">&quot;Could not compute stream ID for &quot;</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">184</span>  <span title="Normal "class="Normal">            ptr,
</span><span title="LineNr "class="LineNr">185</span>  <span title="Normal "class="Normal">            </span><span title="cString "class="cString">&quot; on device &quot;</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">186</span>  <span title="Normal "class="Normal">            device_index,
</span><span title="LineNr "class="LineNr">187</span>  <span title="Normal "class="Normal">            </span><span title="cString "class="cString">&quot; (something has gone horribly wrong!)&quot;</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">188</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">189</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">190</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Thread-local current streams
</span><span title="LineNr "class="LineNr">191</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cppStorageClass "class="cppStorageClass">thread_local</span><span title="Normal "class="Normal"> LeakyStreamInternals** current_streams &#61; </span><span title="cppConstant "class="cppConstant">nullptr</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">192</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">193</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Populates global values and creates a default stream for each device.
</span><span title="LineNr "class="LineNr">194</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Note: the default stream on each device is signified by a nullptr,
</span><span title="LineNr "class="LineNr">195</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// and so is not created as usual.
</span><span title="LineNr "class="LineNr">196</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// In particular, we don&#39;t need to switch devices when creating the
</span><span title="LineNr "class="LineNr">197</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// streams.
</span><span title="LineNr "class="LineNr">198</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Warning: this function must only be called once!
</span><span title="LineNr "class="LineNr">199</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> initGlobalStreamState() {
</span><span title="LineNr "class="LineNr">200</span>  <span title="Normal "class="Normal">        num_gpus &#61; device_count();
</span><span title="LineNr "class="LineNr">201</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// Check if the number of GPUs matches the expected compile-time max number
</span><span title="LineNr "class="LineNr">202</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// of GPUs.
</span><span title="LineNr "class="LineNr">203</span>  <span title="Normal "class="Normal">        AT_ASSERTM(
</span><span title="LineNr "class="LineNr">204</span>  <span title="Normal "class="Normal">            num_gpus &lt;&#61; C10_COMPILE_TIME_MAX_GPUS,
</span><span title="LineNr "class="LineNr">205</span>  <span title="Normal "class="Normal">            </span><span title="cString "class="cString">&quot;Number of CUDA devices on the machine is larger than the compiled &quot;
</span><span title="LineNr "class="LineNr">206</span>  <span title="Normal "class="Normal">            </span><span title="cString "class="cString">&quot;max number of gpus expected (&quot;</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">207</span>  <span title="Normal "class="Normal">            C10_COMPILE_TIME_MAX_GPUS,
</span><span title="LineNr "class="LineNr">208</span>  <span title="Normal "class="Normal">            </span><span title="cString "class="cString">&quot;). Increase that and recompile.&quot;</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">209</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">210</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// Initializes default streams
</span><span title="LineNr "class="LineNr">211</span>  <span title="Normal "class="Normal">        </span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (</span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal"> i &#61; </span><span title="cppStorageClass "class="cppStorageClass">decltype</span><span title="Normal "class="Normal">(num_gpus){</span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">}; i &lt; num_gpus; ++i) {
</span><span title="LineNr "class="LineNr">212</span>  <span title="Normal "class="Normal">          default_streams[i].device_index &#61; i;
</span><span title="LineNr "class="LineNr">213</span>  <span title="Normal "class="Normal">          low_priority_counters[i] &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">214</span>  <span title="Normal "class="Normal">          high_priority_counters[i] &#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">215</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">216</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">217</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">218</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Creates the low and high priority stream pools for the specified device
</span><span title="LineNr "class="LineNr">219</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Warning: only call once per device!
</span><span title="LineNr "class="LineNr">220</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> initDeviceStreamState(DeviceIndex device_index) {
</span><span title="LineNr "class="LineNr">221</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// Switches to the requested device so streams are properly associated
</span><span title="LineNr "class="LineNr">222</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// with it.
</span><span title="LineNr "class="LineNr">223</span>  <span title="Normal "class="Normal">        CUDAGuard device_guard{device_index};
</span><span title="LineNr "class="LineNr">224</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">225</span>  <span title="Normal "class="Normal">        </span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (</span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal"> i &#61; </span><span title="cppStorageClass "class="cppStorageClass">decltype</span><span title="Normal "class="Normal">(kStreamsPerPool){</span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">}; i &lt; kStreamsPerPool; ++i) {
</span><span title="LineNr "class="LineNr">226</span>  <span title="Normal "class="Normal">          </span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal">&amp; lowpri_stream &#61; low_priority_streams[device_index][i];
</span><span title="LineNr "class="LineNr">227</span>  <span title="Normal "class="Normal">          </span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal">&amp; hipri_stream &#61; high_priority_streams[device_index][i];
</span><span title="LineNr "class="LineNr">228</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">229</span>  <span title="Normal "class="Normal">          lowpri_stream.device_index &#61; device_index;
</span><span title="LineNr "class="LineNr">230</span>  <span title="Normal "class="Normal">          hipri_stream.device_index &#61; device_index;
</span><span title="LineNr "class="LineNr">231</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">232</span>  <span title="cPreCondit "class="cPreCondit">#ifndef __HIP_PLATFORM_HCC__
</span><span title="LineNr "class="LineNr">233</span>  <span title="Normal "class="Normal">          C10_CUDA_CHECK(cudaStreamCreateWithPriority(
</span><span title="LineNr "class="LineNr">234</span>  <span title="Normal "class="Normal">                &amp;lowpri_stream.stream, kDefaultFlags, kLowPriority));
</span><span title="LineNr "class="LineNr">235</span>  <span title="Normal "class="Normal">          C10_CUDA_CHECK(cudaStreamCreateWithPriority(
</span><span title="LineNr "class="LineNr">236</span>  <span title="Normal "class="Normal">                &amp;hipri_stream.stream, kDefaultFlags, kHighPriority));
</span><span title="LineNr "class="LineNr">237</span>  <span title="cPreConditMatch "class="cPreConditMatch">#else
</span><span title="LineNr "class="LineNr">238</span>  <span title="Normal "class="Normal">          C10_CUDA_CHECK(
</span><span title="LineNr "class="LineNr">239</span>  <span title="Normal "class="Normal">              cudaStreamCreateWithFlags(&amp;lowpri_stream.stream, kDefaultFlags));
</span><span title="LineNr "class="LineNr">240</span>  <span title="Normal "class="Normal">          C10_CUDA_CHECK(
</span><span title="LineNr "class="LineNr">241</span>  <span title="Normal "class="Normal">              cudaStreamCreateWithFlags(&amp;hipri_stream.stream, kDefaultFlags));
</span><span title="LineNr "class="LineNr">242</span>  <span title="cPreConditMatch "class="cPreConditMatch">#endif</span><span title="Normal "class="Normal"> </span><span title="cCommentL "class="cCommentL">// __HIP_PLATFORM_HCC__
</span><span title="LineNr "class="LineNr">243</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">244</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">245</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">246</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Init front-end to ensure initialization only occurs once
</span><span title="LineNr "class="LineNr">247</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> initCUDAStreamsOnce() {
</span><span title="LineNr "class="LineNr">248</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// Inits default streams (once, globally)
</span><span title="LineNr "class="LineNr">249</span>  <span title="Normal "class="Normal">        std::call_once(init_flag, initGlobalStreamState);
</span><span title="LineNr "class="LineNr">250</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">251</span>  <span title="Normal "class="Normal">        </span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (current_streams) {
</span><span title="LineNr "class="LineNr">252</span>  <span title="Normal "class="Normal">          </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal">;
</span><span title="LineNr "class="LineNr">253</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">254</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">255</span>  <span title="Normal "class="Normal">        </span><span title="cCommentL "class="cCommentL">// Inits current streams (thread local) to default streams
</span><span title="LineNr "class="LineNr">256</span>  <span title="Normal "class="Normal">        current_streams &#61;
</span><span title="LineNr "class="LineNr">257</span>  <span title="Normal "class="Normal">          (LeakyStreamInternals**)malloc(num_gpus * </span><span title="cOperator "class="cOperator">sizeof</span><span title="Normal "class="Normal">(LeakyStreamInternals*));
</span><span title="LineNr "class="LineNr">258</span>  <span title="Normal "class="Normal">        </span><span title="cRepeat "class="cRepeat">for</span><span title="Normal "class="Normal"> (</span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal"> i &#61; </span><span title="cppStorageClass "class="cppStorageClass">decltype</span><span title="Normal "class="Normal">(num_gpus){</span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">}; i &lt; num_gpus; ++i) {
</span><span title="LineNr "class="LineNr">259</span>  <span title="Normal "class="Normal">          current_streams[i] &#61; &amp;default_streams[i];
</span><span title="LineNr "class="LineNr">260</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">261</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">262</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">263</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Helper to verify the GPU index is valid
</span><span title="LineNr "class="LineNr">264</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cppModifier "class="cppModifier">inline</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> check_gpu(DeviceIndex device_index) {
</span><span title="LineNr "class="LineNr">265</span>  <span title="Normal "class="Normal">        AT_ASSERT(device_index &gt;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal"> &amp;&amp; device_index &lt; num_gpus);
</span><span title="LineNr "class="LineNr">266</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">267</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">268</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Helper to determine the index of the stream to return
</span><span title="LineNr "class="LineNr">269</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Note: Streams are returned round-robin (see note in CUDAStream.h)
</span><span title="LineNr "class="LineNr">270</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">static</span><span title="Normal "class="Normal"> </span><span title="cType "class="cType">uint32_t</span><span title="Normal "class="Normal"> get_idx(std::atomic&lt;</span><span title="cType "class="cType">uint32_t</span><span title="Normal "class="Normal">&gt;&amp; counter) {
</span><span title="LineNr "class="LineNr">271</span>  <span title="Normal "class="Normal">        </span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal"> raw_idx &#61; counter++;
</span><span title="LineNr "class="LineNr">272</span>  <span title="Normal "class="Normal">        </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> raw_idx % kStreamsPerPool;
</span><span title="LineNr "class="LineNr">273</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">274</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">275</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// See Note [StreamId assignment]
</span><span title="LineNr "class="LineNr">276</span>  <span title="Normal "class="Normal">      LeakyStreamInternals* CUDAStream_internals(CUDAStream s) {
</span><span title="LineNr "class="LineNr">277</span>  <span title="Normal "class="Normal">        c10::DeviceIndex device_index &#61; s.device_index();
</span><span title="LineNr "class="LineNr">278</span>  <span title="Normal "class="Normal">        StreamIdType st &#61; streamIdType(s.unwrap().id());
</span><span title="LineNr "class="LineNr">279</span>  <span title="Normal "class="Normal">        </span><span title="cType "class="cType">size_t</span><span title="Normal "class="Normal"> si &#61; streamIdIndex(s.unwrap().id());
</span><span title="LineNr "class="LineNr">280</span>  <span title="Normal "class="Normal">        </span><span title="cConditional "class="cConditional">switch</span><span title="Normal "class="Normal"> (st) {
</span><span title="LineNr "class="LineNr">281</span>  <span title="Normal "class="Normal">          </span><span title="cLabel "class="cLabel">case</span><span title="Normal "class="Normal"> StreamIdType::DEFAULT:
</span><span title="LineNr "class="LineNr">282</span>  <span title="Normal "class="Normal">            AT_ASSERTM(
</span><span title="LineNr "class="LineNr">283</span>  <span title="Normal "class="Normal">                si &#61;&#61; </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">284</span>  <span title="Normal "class="Normal">                </span><span title="cString "class="cString">&quot;Unrecognized stream &quot;</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">285</span>  <span title="Normal "class="Normal">                s.unwrap(),
</span><span title="LineNr "class="LineNr">286</span>  <span title="Normal "class="Normal">                </span><span title="cString "class="cString">&quot; (I think this should be the default stream, but I got a non-zero index &quot;</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">287</span>  <span title="Normal "class="Normal">                si,
</span><span title="LineNr "class="LineNr">288</span>  <span title="Normal "class="Normal">                </span><span title="cString "class="cString">&quot;).&quot;</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">289</span>  <span title="Normal "class="Normal">                </span><span title="cString "class="cString">&quot; Did you manufacture the StreamId yourself?  Don&#39;t do that; use the&quot;</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">290</span>  <span title="Normal "class="Normal">                </span><span title="cString "class="cString">&quot; official API like c10::cuda::getStreamFromPool() to get a new stream.&quot;</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">291</span>  <span title="Normal "class="Normal">            </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> &amp;default_streams[device_index];
</span><span title="LineNr "class="LineNr">292</span>  <span title="Normal "class="Normal">          </span><span title="cLabel "class="cLabel">case</span><span title="Normal "class="Normal"> StreamIdType::LOW:
</span><span title="LineNr "class="LineNr">293</span>  <span title="Normal "class="Normal">            </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> &amp;low_priority_streams[device_index][si];
</span><span title="LineNr "class="LineNr">294</span>  <span title="Normal "class="Normal">          </span><span title="cLabel "class="cLabel">case</span><span title="Normal "class="Normal"> StreamIdType::HIGH:
</span><span title="LineNr "class="LineNr">295</span>  <span title="Normal "class="Normal">            </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> &amp;high_priority_streams[device_index][si];
</span><span title="LineNr "class="LineNr">296</span>  <span title="Normal "class="Normal">          </span><span title="cLabel "class="cLabel">default</span><span title="Normal "class="Normal">:
</span><span title="LineNr "class="LineNr">297</span>  <span title="Normal "class="Normal">            AT_ASSERTM(
</span><span title="LineNr "class="LineNr">298</span>  <span title="Normal "class="Normal">                </span><span title="cNumber "class="cNumber">0</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">299</span>  <span title="Normal "class="Normal">                </span><span title="cString "class="cString">&quot;Unrecognized stream &quot;</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">300</span>  <span title="Normal "class="Normal">                s.unwrap(),
</span><span title="LineNr "class="LineNr">301</span>  <span title="Normal "class="Normal">                </span><span title="cString "class="cString">&quot; (I didn&#39;t recognize the stream type, &quot;</span><span title="Normal "class="Normal">,
</span><span title="LineNr "class="LineNr">302</span>  <span title="Normal "class="Normal">                st,
</span><span title="LineNr "class="LineNr">303</span>  <span title="Normal "class="Normal">                </span><span title="cString "class="cString">&quot;)&quot;</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">304</span>  <span title="Normal "class="Normal">        }
</span><span title="LineNr "class="LineNr">305</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">306</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">307</span>  <span title="Normal "class="Normal">      CUDAStream CUDAStream_fromInternals(</span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> LeakyStreamInternals* ptr) {
</span><span title="LineNr "class="LineNr">308</span>  <span title="Normal "class="Normal">        </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> CUDAStream(
</span><span title="LineNr "class="LineNr">309</span>  <span title="Normal "class="Normal">            CUDAStream::UNCHECKED,
</span><span title="LineNr "class="LineNr">310</span>  <span title="Normal "class="Normal">            Stream(
</span><span title="LineNr "class="LineNr">311</span>  <span title="Normal "class="Normal">              Stream::UNSAFE,
</span><span title="LineNr "class="LineNr">312</span>  <span title="Normal "class="Normal">              c10::Device(DeviceType::CUDA, ptr-&gt;device_index),
</span><span title="LineNr "class="LineNr">313</span>  <span title="Normal "class="Normal">              CUDAStream_getStreamId(ptr)));
</span><span title="LineNr "class="LineNr">314</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">315</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">316</span>  <span title="Normal "class="Normal">    } </span><span title="cCommentL "class="cCommentL">// anonymous namespace
</span><span title="LineNr "class="LineNr">317</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">318</span>  <span title="Normal "class="Normal">    cudaStream_t CUDAStream::stream() </span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> {
</span><span title="LineNr "class="LineNr">319</span>  <span title="Normal "class="Normal">      </span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal"> ptr &#61; CUDAStream_internals(*</span><span title="cppStatement "class="cppStatement">this</span><span title="Normal "class="Normal">);
</span><span title="LineNr "class="LineNr">320</span>  <span title="Normal "class="Normal">      AT_ASSERT(ptr);
</span><span title="LineNr "class="LineNr">321</span>  <span title="Normal "class="Normal">      </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> ptr-&gt;stream;
</span><span title="LineNr "class="LineNr">322</span>  <span title="Normal "class="Normal">    }
</span><span title="LineNr "class="LineNr">323</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">324</span>  <span title="Normal "class="Normal">    </span><span title="cCommentL "class="cCommentL">// Returns a stream from the requested pool
</span><span title="LineNr "class="LineNr">325</span>  <span title="Normal "class="Normal">    </span><span title="cCommentL "class="cCommentL">// Note: when called the first time on a device, this will create the
</span><span title="LineNr "class="LineNr">326</span>  <span title="Normal "class="Normal">    </span><span title="cCommentL "class="cCommentL">// stream pools for that device.
</span><span title="LineNr "class="LineNr">327</span>  <span title="Normal "class="Normal">    CUDAStream getStreamFromPool(
</span><span title="LineNr "class="LineNr">328</span>  <span title="Normal "class="Normal">        </span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> </span><span title="cppType "class="cppType">bool</span><span title="Normal "class="Normal"> isHighPriority,
</span><span title="LineNr "class="LineNr">329</span>  <span title="Normal "class="Normal">        DeviceIndex device_index) {
</span><span title="LineNr "class="LineNr">330</span>  <span title="Normal "class="Normal">      initCUDAStreamsOnce();
</span><span title="LineNr "class="LineNr">331</span>  <span title="Normal "class="Normal">      </span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (device_index &#61;&#61; -</span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal">)
</span><span title="LineNr "class="LineNr">332</span>  <span title="Normal "class="Normal">        device_index &#61; current_device();
</span><span title="LineNr "class="LineNr">333</span>  <span title="Normal "class="Normal">      check_gpu(device_index);
</span><span title="LineNr "class="LineNr">334</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">335</span>  <span title="Normal "class="Normal">      </span><span title="cCommentL "class="cCommentL">// Initializes the stream pools (once)
</span><span title="LineNr "class="LineNr">336</span>  <span title="Normal "class="Normal">      std::call_once(
</span><span title="LineNr "class="LineNr">337</span>  <span title="Normal "class="Normal">          device_flags[device_index], initDeviceStreamState, device_index);
</span><span title="LineNr "class="LineNr">338</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">339</span>  <span title="Normal "class="Normal">      </span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (isHighPriority) {
</span><span title="LineNr "class="LineNr">340</span>  <span title="Normal "class="Normal">        </span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> </span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal"> idx &#61; get_idx(high_priority_counters[device_index]);
</span><span title="LineNr "class="LineNr">341</span>  <span title="Normal "class="Normal">        </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> CUDAStream_fromInternals(&amp;high_priority_streams[device_index][idx]);
</span><span title="LineNr "class="LineNr">342</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">343</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">344</span>  <span title="Normal "class="Normal">      </span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> </span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal"> idx &#61; get_idx(low_priority_counters[device_index]);
</span><span title="LineNr "class="LineNr">345</span>  <span title="Normal "class="Normal">      </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> CUDAStream_fromInternals(&amp;low_priority_streams[device_index][idx]);
</span><span title="LineNr "class="LineNr">346</span>  <span title="Normal "class="Normal">    }
</span><span title="LineNr "class="LineNr">347</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">348</span>  <span title="Normal "class="Normal">    CUDAStream getDefaultCUDAStream(DeviceIndex device_index) {
</span><span title="LineNr "class="LineNr">349</span>  <span title="Normal "class="Normal">      initCUDAStreamsOnce();
</span><span title="LineNr "class="LineNr">350</span>  <span title="Normal "class="Normal">      </span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (device_index &#61;&#61; -</span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal">) {
</span><span title="LineNr "class="LineNr">351</span>  <span title="Normal "class="Normal">        device_index &#61; current_device();
</span><span title="LineNr "class="LineNr">352</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">353</span>  <span title="Normal "class="Normal">      check_gpu(device_index);
</span><span title="LineNr "class="LineNr">354</span>  <span title="Normal "class="Normal">      </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> CUDAStream_fromInternals(&amp;default_streams[device_index]);
</span><span title="LineNr "class="LineNr">355</span>  <span title="Normal "class="Normal">    }
</span><span title="LineNr "class="LineNr">356</span>  <span title="Normal "class="Normal">    CUDAStream getCurrentCUDAStream(DeviceIndex device_index) {
</span><span title="LineNr "class="LineNr">357</span>  <span title="Normal "class="Normal">      initCUDAStreamsOnce();
</span><span title="LineNr "class="LineNr">358</span>  <span title="Normal "class="Normal">      </span><span title="cConditional "class="cConditional">if</span><span title="Normal "class="Normal"> (device_index &#61;&#61; -</span><span title="cppNumber "class="cppNumber">1</span><span title="Normal "class="Normal">) {
</span><span title="LineNr "class="LineNr">359</span>  <span title="Normal "class="Normal">        device_index &#61; current_device();
</span><span title="LineNr "class="LineNr">360</span>  <span title="Normal "class="Normal">      }
</span><span title="LineNr "class="LineNr">361</span>  <span title="Normal "class="Normal">      check_gpu(device_index);
</span><span title="LineNr "class="LineNr">362</span>  <span title="Normal "class="Normal">      </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> CUDAStream_fromInternals(current_streams[device_index]);
</span><span title="LineNr "class="LineNr">363</span>  <span title="Normal "class="Normal">    }
</span><span title="LineNr "class="LineNr">364</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">365</span>  <span title="Normal "class="Normal">    </span><span title="cType "class="cType">void</span><span title="Normal "class="Normal"> setCurrentCUDAStream(CUDAStream stream) {
</span><span title="LineNr "class="LineNr">366</span>  <span title="Normal "class="Normal">      initCUDAStreamsOnce();
</span><span title="LineNr "class="LineNr">367</span>  <span title="Normal "class="Normal">      </span><span title="cppType "class="cppType">auto</span><span title="Normal "class="Normal"> ptr &#61; CUDAStream_internals(stream);
</span><span title="LineNr "class="LineNr">368</span>  <span title="Normal "class="Normal">      AT_ASSERT(ptr);
</span><span title="LineNr "class="LineNr">369</span>  <span title="Normal "class="Normal">      current_streams[ptr-&gt;device_index] &#61; ptr;
</span><span title="LineNr "class="LineNr">370</span>  <span title="Normal "class="Normal">    }
</span><span title="LineNr "class="LineNr">371</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">372</span>  <span title="Normal "class="Normal">    std::ostream&amp; </span><span title="cppOperator "class="cppOperator">operator</span><span title="Normal "class="Normal">&lt;&lt;(std::ostream&amp; stream, </span><span title="cStorageClass "class="cStorageClass">const</span><span title="Normal "class="Normal"> CUDAStream&amp; s) {
</span><span title="LineNr "class="LineNr">373</span>  <span title="Normal "class="Normal">      </span><span title="cStatement "class="cStatement">return</span><span title="Normal "class="Normal"> stream &lt;&lt; s.unwrap();
</span><span title="LineNr "class="LineNr">374</span>  <span title="Normal "class="Normal">    }
</span><span title="LineNr "class="LineNr">375</span>  <span title="Normal "class="Normal">
</span><span title="LineNr "class="LineNr">376</span>  <span title="Normal "class="Normal">  } </span><span title="cCommentL "class="cCommentL">// namespace cuda
</span><span title="LineNr "class="LineNr last-LineNr">377</span>  <span title="Normal "class="Normal">} </span><span title="cCommentL "class="cCommentL">// namespace c10</span>